import './Standup.css';
import React from 'react';
import {
  HiHome,
  HiBriefcase,
  HiPlus,
  HiTrash,
  HiCheck,
  HiXMark,
  HiDocument,
  HiShoppingCart,
  HiHeart,
  HiStar,
  HiBookmark,
  HiCalendar,
  HiGlobeAlt,
  HiLightBulb,
  HiCog,
  HiCodeBracket,
  HiCloud,
  HiBuildingLibrary,
  HiBuildingOffice,
  HiSun,
  HiMoon,
  HiCog8Tooth,
  HiChevronDown
} from 'react-icons/hi2';
import { IoMdArrowDropdown } from 'react-icons/io';
import { parse } from 'chrono-node';
import { useReminders } from '@natural/context/ReminderContext';
import type { Category } from '@natural/components/CategorySelector';
import type { NewReminder, Reminder } from '@natural/types/reminder';
import { storageService } from '@natural/services/storage';
import { FaLeaf } from "react-icons/fa";
import { IoNotificationsOutline, IoNotificationsOffOutline } from "react-icons/io5";

interface EditingReminder {
  id: string;
  title: string;
  categoryId: string | null;
  date: string;
  time: string;
}

interface IconOption {
  id: string;
  icon: JSX.Element;
}

const iconOptions = [
  { id: 'star', icon: <HiStar className="text-2xl" /> },
  { id: 'document', icon: <HiDocument className="text-2xl" /> },
  { id: 'home', icon: <HiHome className="text-2xl" /> },
  { id: 'briefcase', icon: <HiBriefcase className="text-2xl" /> },
  { id: 'shopping', icon: <HiShoppingCart className="text-2xl" /> },
  { id: 'heart', icon: <HiHeart className="text-2xl" /> },
  { id: 'bookmark', icon: <HiBookmark className="text-2xl" /> },
  { id: 'calendar', icon: <HiCalendar className="text-2xl" /> },
  { id: 'globe', icon: <HiGlobeAlt className="text-2xl" /> },
  { id: 'bulb', icon: <HiLightBulb className="text-2xl" /> },
  { id: 'settings', icon: <HiCog className="text-2xl" /> },
  { id: 'code', icon: <HiCodeBracket className="text-2xl" /> },
  { id: 'cloud', icon: <HiCloud className="text-2xl" /> },
  { id: 'library', icon: <HiBuildingLibrary className="text-2xl" /> },
  { id: 'office', icon: <HiBuildingOffice className="text-2xl" /> }
];

const colorOptions = [
  { name: 'Blue', value: '#3B82F6' },
  { name: 'Green', value: '#10B981' },
  { name: 'Red', value: '#EF4444' },
  { name: 'Purple', value: '#8B5CF6' },
  { name: 'Pink', value: '#EC4899' },
  { name: 'Yellow', value: '#F59E0B' },
  { name: 'Indigo', value: '#6366F1' },
  { name: 'Teal', value: '#14B8A6' },
  { name: 'Orange', value: '#F97316' },
  { name: 'Gray', value: '#6B7280' }
];

const findCategoryById = (categories: Category[], id: string | null | undefined): Category | undefined => {
  return categories.find((category: Category) => category.id === (id || 'default'));
};

const getCategoryIcon = (categoryId: string, categories: Category[]): JSX.Element => {
  const category = findCategoryById(categories, categoryId);
  const iconId = category?.icon ?? 'star';
  const iconOption = iconOptions.find((opt: IconOption) => opt.id === iconId);
  return iconOption?.icon ?? iconOptions[0]!.icon;
};

const Standup = () => {
  const [input, setInput] = React.useState('');
  const [selectedCategoryId, setSelectedCategoryId] = React.useState<string>('default');
  const [showCategories, setShowCategories] = React.useState(false);
  const [editingReminder, setEditingReminder] = React.useState<EditingReminder | null>(null);
  const [showCategoryDropdown, setShowCategoryDropdown] = React.useState<string | null>(null);
  const [categories, setCategories] = React.useState<Category[]>([]);
  const [showAddCategory, setShowAddCategory] = React.useState(false);
  const [newCategoryName, setNewCategoryName] = React.useState('');
  const [newCategoryColor, setNewCategoryColor] = React.useState('#6B7280');
  const [newCategoryIcon, setNewCategoryIcon] = React.useState('star');
  const [showAllReminders, setShowAllReminders] = React.useState(false);
  const [isDarkMode, setIsDarkMode] = React.useState(false);
  const categoryDropdownRef = React.useRef<HTMLDivElement>(null);
  const editCategoryDropdownRef = React.useRef<HTMLDivElement>(null);
  const editingInputRef = React.useRef<HTMLInputElement>(null);
  const dateInputRef = React.useRef<HTMLInputElement>(null);
  const timeInputRef = React.useRef<HTMLInputElement>(null);
  const { addReminder, reminders, loading, error, updateReminder, deleteReminder } = useReminders();

  React.useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (categoryDropdownRef.current && !categoryDropdownRef.current.contains(event.target as Node)) {
        setShowCategories(false);
        setShowAddCategory(false);
      }
      if (editCategoryDropdownRef.current && !editCategoryDropdownRef.current.contains(event.target as Node)) {
        setShowCategoryDropdown(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  React.useEffect(() => {
    loadCategories();
  }, []);

  React.useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (editingReminder && 
          !editingInputRef.current?.contains(event.target as Node) &&
          !editCategoryDropdownRef.current?.contains(event.target as Node) &&
          !dateInputRef.current?.contains(event.target as Node) &&
          !timeInputRef.current?.contains(event.target as Node)) {
        handleSaveEdit();
      }
      if (editCategoryDropdownRef.current && !editCategoryDropdownRef.current.contains(event.target as Node)) {
        setShowCategoryDropdown(null);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [editingReminder]);

  React.useEffect(() => {
    // Check local storage first
    const storedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    const shouldBeDark = storedTheme === 'dark' || (!storedTheme && prefersDark);
    
    setIsDarkMode(shouldBeDark);
    document.documentElement.classList.toggle('dark', shouldBeDark);
  }, []);

  const loadCategories = async (): Promise<void> => {
    const loadedCategories = await storageService.getAllCategories();
    setCategories(loadedCategories);
  };

  const handleAddReminder = async (e?: React.FormEvent): Promise<void> => {
    if (e) {
      e.preventDefault();
    }

    if (!input?.trim()) {
      return;
    }

    const now = new Date();
    const reminder: NewReminder = {
      title: input.trim(),
      description: '',
      date: now.toISOString().split('T')[0] ?? '',
      time: now.toISOString().split('T')[1]?.substring(0, 8) ?? '00:00:00',
      completed: false,
      priority: 'medium' as const,
      tags: [],
      categoryId: selectedCategoryId,
      notification: { sound: true, preNotify: 0 },
      recurring: null
    };

    try {
      const results = parse(input.trim());
      const start = results?.[0]?.start;
      
      if (start) {
        const date = new Date();
        const parsedDate = new Date(
          start.get('year') ?? date.getFullYear(),
          (start.get('month') ?? date.getMonth() + 1) - 1,
          start.get('day') ?? date.getDate(),
          start.get('hour') ?? date.getHours(),
          start.get('minute') ?? date.getMinutes()
        );

        if (!isNaN(parsedDate.getTime())) {
          const isoString = parsedDate.toISOString();
          reminder.date = isoString.split('T')[0] ?? '';
          reminder.time = isoString.split('T')[1]?.substring(0, 8) ?? '00:00:00';
        }
      }
    } catch (error) {
      console.error('Error parsing date:', error);
    }

    await addReminder(reminder);
    setInput('');
    setSelectedCategoryId('default');
  };

  const handleAddCategory = async () => {
    if (!newCategoryName.trim()) return;

    await storageService.addCategory({
      name: newCategoryName,
      color: newCategoryColor,
      icon: newCategoryIcon
    });

    setNewCategoryName('');
    setNewCategoryColor('#6B7280');
    setNewCategoryIcon('star');
    setShowAddCategory(false);
    loadCategories();
  };

  const handleNewCategoryKeyDown = (e: React.KeyboardEvent<HTMLInputElement>): void => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleAddCategory();
    }
  };

  const handleDeleteCategory = async (id: string) => {
    if (id === 'default') return;

    try {
      await storageService.deleteCategory(id);
      if (selectedCategoryId === id) {
        setSelectedCategoryId('default');
      }
      loadCategories();
    } catch (error) {
      console.error('Failed to delete category:', error);
    }
  };

  const formatDate = (dateStr: string | undefined) => {
    if (!dateStr) return '';
    const date = new Date(dateStr);
    return date.toLocaleDateString('en-US', { month: 'numeric', day: 'numeric' });
  };

  const formatTime = (timeStr: string | undefined) => {
    if (!timeStr) return '';
    const [hours = '00', minutes = '00'] = timeStr.split(':');
    const hour = parseInt(hours, 10) || 0;
    const ampm = hour >= 12 ? 'PM' : 'AM';
    const hour12 = hour % 12 || 12;
    return `${hour12}:${minutes} ${ampm}`;
  };

  const handleStartEdit = (reminder: Reminder) => {
    const now = new Date();
    setEditingReminder({
      id: reminder.id,
      title: reminder.title,
      categoryId: reminder.categoryId || 'default',
      date: reminder.date || now.toISOString().split('T')[0]!,
      time: reminder.time || now.toISOString().split('T')[1]?.substring(0, 8) || '00:00:00'
    });
  };

  const handleSaveEdit = async () => {
    if (!editingReminder) return;

    try {
      await updateReminder(editingReminder.id, {
        title: editingReminder.title,
        categoryId: editingReminder.categoryId,
        date: editingReminder.date,
        time: editingReminder.time
      });
      setEditingReminder(null);
      setShowCategoryDropdown(null);
    } catch (error) {
      console.error('Failed to update reminder:', error);
    }
  };

  const handleCancelEdit = () => {
    setEditingReminder(null);
    setShowCategoryDropdown(null);
  };

  const handleDelete = async (id: string) => {
    if (!window.confirm('Are you sure you want to delete this reminder?')) {
      return;
    }

    try {
      await deleteReminder(id);
    } catch (error) {
      console.error('Failed to delete reminder:', error);
    }
  };

  const sortedReminders = [...reminders].sort((a, b) => {
    const dateA = new Date(`${a.date}T${a.time}`);
    const dateB = new Date(`${b.date}T${b.time}`);
    return dateA.getTime() - dateB.getTime();
  });

  const visibleReminders = showAllReminders ? sortedReminders : sortedReminders.slice(0, 6);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setInput(e.target.value);
  };

  const handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>): void => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleAddReminder();
    }
  };

  const handleCategoryInputChange = (e: React.ChangeEvent<HTMLInputElement>): void => {
    setNewCategoryName(e.target.value);
  };

  const getCategoryColor = (categoryId: string | null | undefined): string => {
    const category = findCategoryById(categories, categoryId);
    return category?.color || '#808080';
  };

  const toggleDarkMode = () => {
    const newDarkMode = !isDarkMode;
    setIsDarkMode(newDarkMode);
    document.documentElement.classList.toggle('dark', newDarkMode);
    localStorage.setItem('theme', newDarkMode ? 'dark' : 'light');
    console.log('Dark mode toggled:', newDarkMode);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-6">
        <div className="max-w-2xl mx-auto bg-white dark:bg-gray-800 rounded-[25px] shadow-lg p-6">
          <div className="text-center text-gray-600 dark:text-gray-400">Loading...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-6">
        <div className="max-w-2xl mx-auto bg-white dark:bg-gray-800 rounded-[25px] shadow-lg p-6">
          <div className="text-center text-red-600 dark:text-red-400">{error}</div>
        </div>
      </div>
    );
  }

  return (
    <div className={`min-h-screen bg-gray-50 dark:bg-gray-900 p-6 transition-colors duration-200`}>
      <div className="max-w-2xl mx-auto bg-white dark:bg-gray-800 rounded-[25px] shadow-lg p-6">
        <div className="flex justify-between items-center mb-6">
          <div className="flex items-center space-x-2">
            <FaLeaf className="text-2xl text-green-500 dark:text-green-400" />
            <h1 className="text-2xl text-gray-600 dark:text-gray-300 font-semibold">Natural Reminders</h1>
          </div>
          <div className="flex items-center space-x-3">
            <button
              onClick={toggleDarkMode}
              className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
            >
              {isDarkMode ? (
                <HiSun className="text-xl text-gray-600 dark:text-gray-300" />
              ) : (
                <HiMoon className="text-xl text-gray-600 dark:text-gray-300" />
              )}
            </button>
            <button
              className="p-2 rounded-full hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors duration-200"
            >
              <HiCog8Tooth className="text-xl text-gray-600 dark:text-gray-300" />
            </button>
          </div>
        </div>

        <form onSubmit={handleAddReminder} className="relative mb-4">
          <input
            type="text"
            value={input}
            onChange={handleInputChange}
            onKeyDown={handleInputKeyDown}
            placeholder="Add a reminder in natural language"
            className="w-full p-4 pr-12 border-2 border-gray-300 dark:border-gray-600 rounded-[25px] focus:outline-none focus:border-gray-400 dark:focus:border-gray-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
          />
          <button
            type="submit"
            className="absolute right-4 top-1/2 transform -translate-y-1/2"
          >
            <HiPlus className="text-gray-400 dark:text-gray-500 text-xl" />
          </button>
        </form>

        <div className="flex justify-end mb-4">
          <div className="relative" ref={categoryDropdownRef}>
            <button
              type="button"
              className="flex items-center px-4 py-2 border-2 border-gray-300 dark:border-gray-600 rounded-[25px] min-w-[200px] category-item bg-white dark:bg-gray-700"
              onClick={() => setShowCategories(!showCategories)}
              style={{ '--category-color': getCategoryColor(selectedCategoryId) } as React.CSSProperties}
            >
              <div className="flex items-center gap-2 flex-1">
                {getCategoryIcon(selectedCategoryId, categories)}
                <span className="flex-1 text-gray-900 dark:text-gray-100">{categories.find(c => c.id === selectedCategoryId)?.name || 'Default'}</span>
                <div className="flex items-center gap-1 text-gray-400 dark:text-gray-500">
                  <span className="text-sm">Select</span>
                  <IoMdArrowDropdown className="text-xl" />
                </div>
              </div>
            </button>
            {showCategories && (
              <div className="absolute right-0 mt-2 w-64 bg-white dark:bg-gray-700 border-2 border-gray-300 dark:border-gray-600 rounded-[25px] shadow-lg z-10">
                {categories.map((category) => (
                  <div
                    key={category.id}
                    className="flex items-center justify-between px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-600"
                  >
                    <button
                      type="button"
                      className="flex items-center space-x-2 category-item"
                      onClick={() => {
                        setSelectedCategoryId(category.id);
                        setShowCategories(false);
                      }}
                      data-category={category.id}
                      style={{ '--category-color': category.color } as React.CSSProperties}
                    >
                      <div className="category-icon">
                        {getCategoryIcon(category.id, categories)}
                      </div>
                      <span className="text-gray-900 dark:text-gray-100">{category.name}</span>
                    </button>
                    {category.id !== 'default' && (
                      <button
                        type="button"
                        className="text-red-500 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300"
                        onClick={() => handleDeleteCategory(category.id)}
                      >
                        <HiTrash className="text-xl" />
                      </button>
                    )}
                  </div>
                ))}
                <div className="border-t border-gray-200 dark:border-gray-600">
                  {showAddCategory ? (
                    <div className="p-4">
                      <div className="space-y-3">
                        <input
                          type="text"
                          value={newCategoryName}
                          onChange={handleCategoryInputChange}
                          onKeyDown={handleNewCategoryKeyDown}
                          placeholder="Add new category"
                          className="w-full p-2 border border-gray-300 dark:border-gray-600 rounded-[25px] bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
                        />
                        <div className="grid grid-cols-5 gap-2 p-2 border border-gray-200 dark:border-gray-600 rounded-[25px] bg-gray-50 dark:bg-gray-800">
                          {colorOptions.map((color) => (
                            <button
                              key={color.value}
                              type="button"
                              className="flex items-center justify-center p-2 hover:bg-white rounded-lg"
                              onClick={() => setNewCategoryColor(color.value)}
                            >
                              <div 
                                className={`w-7 h-7 rounded-full ${newCategoryColor === color.value ? 'ring-2 ring-offset-2 ring-gray-400' : ''}`}
                                style={{ backgroundColor: color.value }}
                              />
                            </button>
                          ))}
                        </div>
                        <div className="grid grid-cols-5 gap-2 p-2 border border-gray-200 dark:border-gray-600 rounded-[25px] bg-gray-50 dark:bg-gray-800">
                          {iconOptions.map((option) => (
                            <button
                              key={option.id}
                              type="button"
                              className="flex items-center justify-center p-2 hover:bg-white rounded-lg"
                              onClick={(e) => {
                                e.stopPropagation();
                                setNewCategoryIcon(option.id);
                              }}
                              title={option.id}
                            >
                              <div className={`category-icon text-2xl ${newCategoryIcon === option.id ? 'ring-2 ring-offset-2 ring-gray-400 rounded-full p-1 scale-110' : 'scale-110'}`} 
                                style={{ '--category-color': newCategoryColor } as React.CSSProperties}>
                                {option.icon}
                              </div>
                            </button>
                          ))}
                        </div>
                      </div>
                      <div className="flex justify-end space-x-2 mt-3">
                        <button
                          type="button"
                          className="text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
                          onClick={(e) => {
                            e.stopPropagation();
                            setShowAddCategory(false);
                            setNewCategoryName('');
                            setNewCategoryColor('#6B7280');
                            setNewCategoryIcon('star');
                          }}
                        >
                          <HiXMark className="text-xl" />
                        </button>
                        <button
                          type="button"
                          className="text-green-600 dark:text-green-400 hover:text-green-800 dark:hover:text-green-300"
                          onClick={(e) => {
                            e.stopPropagation();
                            handleAddCategory();
                          }}
                        >
                          <HiCheck className="text-xl" />
                        </button>
                      </div>
                    </div>
                  ) : (
                    <button
                      type="button"
                      className="w-full px-4 py-2 text-left text-gray-600 dark:text-gray-400 hover:bg-gray-100 dark:hover:bg-gray-600 flex items-center space-x-2"
                      onClick={() => setShowAddCategory(true)}
                    >
                      <HiPlus className="text-xl" />
                      <span>Add Category</span>
                    </button>
                  )}
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="space-y-4">
          {sortedReminders.length === 0 ? (
            <div className="text-center text-gray-500 dark:text-gray-400 py-8">
              No reminders yet. Add one above!
            </div>
          ) : (
            <>
              {visibleReminders.map((reminder) => (
                <div
                  key={reminder.id}
                  className="flex items-center p-4 rounded-[25px] reminder-item min-h-[4.4rem] bg-white dark:bg-gray-800"
                  data-category={reminder.categoryId}
                  style={{ '--category-color': (categories.find(c => c.id === reminder.categoryId) || { color: '#d2d4d8' }).color } as React.CSSProperties}
                >
                  <div className="w-8 flex items-center">
                    {editingReminder?.id === reminder.id ? (
                      <div className="relative" ref={editCategoryDropdownRef}>
                        <button
                          type="button"
                          onClick={(e) => {
                            e.stopPropagation();
                            setShowCategoryDropdown(showCategoryDropdown === reminder.id ? null : reminder.id);
                          }}
                          className="category-item hover:opacity-75 flex items-center"
                          style={{
                            '--category-color': (categories.find(c => c?.id === (editingReminder?.categoryId || 'default')) || { color: '#808080' }).color
                          } as React.CSSProperties}
                        >
                          {getCategoryIcon(editingReminder?.categoryId || 'default', categories)}
                        </button>
                        {showCategoryDropdown === reminder.id && (
                          <div className="absolute mt-2 w-48 category-dropdown border-2 border-gray-300 shadow-lg">
                            {categories.map((category) => (
                              <button
                                key={category.id}
                                type="button"
                                className="w-full px-4 py-2 flex items-center gap-2 hover:bg-gray-50 category-item"
                                style={{ '--category-color': category.color } as React.CSSProperties}
                                onClick={(e) => {
                                  e.stopPropagation();
                                  if (editingReminder && category.id) {
                                    setEditingReminder({
                                      ...editingReminder,
                                      categoryId: category.id
                                    });
                                    setShowCategoryDropdown(null);
                                  }
                                }}
                              >
                                {getCategoryIcon(category.id, categories)}
                                <span>{category.name}</span>
                              </button>
                            ))}
                          </div>
                        )}
                      </div>
                    ) : (
                      <div 
                        className="category-item flex items-center cursor-pointer hover:opacity-75" 
                        onClick={(e) => {
                          e.stopPropagation();
                          handleStartEdit(reminder);
                          setTimeout(() => setShowCategoryDropdown(reminder.id), 0);
                        }}
                        style={{ 
                          '--category-color': categories.find(
                            cat => cat.id === (reminder.categoryId || 'default')
                          )?.color || '#808080'
                        } as React.CSSProperties}
                      >
                        {getCategoryIcon(reminder.categoryId || 'default', categories)}
                      </div>
                    )}
                  </div>
                  <div className="flex-1 ml-4 flex items-center">
                    {editingReminder?.id === reminder.id ? (
                      <>
                        <input
                          ref={dateInputRef}
                          type="date"
                          value={editingReminder.date}
                          onChange={(e) => {
                            e.stopPropagation();
                            setEditingReminder({
                              ...editingReminder,
                              date: e.target.value
                            });
                          }}
                          onClick={(e) => {
                            e.stopPropagation();
                          }}
                          className="text-gray-500 mr-4 px-2 py-1 border-2 border-gray-300 rounded-[25px] focus:outline-none focus:border-gray-400 cursor-pointer"
                        />
                        <input
                          ref={timeInputRef}
                          type="time"
                          value={editingReminder.time.substring(0, 5)}
                          onChange={(e) => {
                            e.stopPropagation();
                            setEditingReminder({
                              ...editingReminder,
                              time: e.target.value + ':00'
                            });
                          }}
                          onClick={(e) => {
                            e.stopPropagation();
                          }}
                          className="text-gray-500 mr-4 px-2 py-1 border-2 border-gray-300 rounded-[25px] focus:outline-none focus:border-gray-400 cursor-pointer"
                        />
                      </>
                    ) : (
                      <>
                        <span 
                          className="text-gray-500 mr-4 whitespace-nowrap cursor-pointer hover:text-gray-700" 
                          onClick={() => handleStartEdit(reminder)}
                        >
                          {formatDate(reminder.date || new Date().toISOString())}
                        </span>
                        <span 
                          className="text-gray-500 mr-4 whitespace-nowrap cursor-pointer hover:text-gray-700" 
                          onClick={() => handleStartEdit(reminder)}
                        >
                          {formatTime(reminder.time)}
                        </span>
                      </>
                    )}
                    {editingReminder?.id === reminder.id ? (
                      <input
                        ref={editingInputRef}
                        type="text"
                        value={editingReminder.title}
                        onChange={(e) => setEditingReminder({
                          ...editingReminder,
                          title: e.target.value
                        })}
                        onKeyDown={(e) => {
                          if (e.key === 'Enter') {
                            e.preventDefault();
                            handleSaveEdit();
                          } else if (e.key === 'Escape') {
                            handleCancelEdit();
                          }
                        }}
                        className="flex-1 px-2 py-1 border-2 border-gray-300 rounded-[25px] focus:outline-none focus:border-gray-400"
                        autoFocus
                      />
                    ) : (
                      <span 
                        className="text-gray-600 cursor-pointer flex-1" 
                        onClick={() => handleStartEdit(reminder)}
                      >
                        {reminder.title}
                      </span>
                    )}
                  </div>
                  <div className="flex space-x-3 ml-4">
                    {editingReminder?.id === reminder.id ? (
                      <div className="w-8"></div>
                    ) : (
                      <>
                        <button 
                          type="button" 
                          onClick={() => {
                            updateReminder(reminder.id, {
                              ...reminder,
                              notification: {
                                ...reminder.notification,
                                sound: !reminder.notification?.sound
                              }
                            });
                          }}
                        >
                          {reminder.notification?.sound ? (
                            <IoNotificationsOutline className="text-blue-500 dark:text-blue-400 text-lg" />
                          ) : (
                            <IoNotificationsOffOutline className="text-gray-400 text-lg" />
                          )}
                        </button>
                        <button type="button" onClick={() => handleDelete(reminder.id)}>
                          <HiTrash className="text-gray-400 text-lg" />
                        </button>
                      </>
                    )}
                  </div>
                </div>
              ))}
              {sortedReminders.length > 7 && (
                <div className="flex justify-center pt-4">
                  <button
                    onClick={() => setShowAllReminders(!showAllReminders)}
                    className="flex items-center space-x-2 px-4 py-2 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-full transition-colors duration-200"
                  >
                    <span>{showAllReminders ? 'Show Less' : `Show ${sortedReminders.length - 6} More`}</span>
                    <HiChevronDown className={`text-xl transform transition-transform duration-200 ${showAllReminders ? 'rotate-180' : ''}`} />
                  </button>
                </div>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default Standup;
